---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "./Layout.astro";
import Banner from "../components/Banner.astro";
import Text from "../components/ui/Text.tsx";
import LinkButton from "../components/ui/LinkButton.tsx";
import Intro from "../components/guide/Intro.astro";
import ItineraryTable from "../components/guide/ItineraryTable.tsx";
import ResponsiveWidth from "../components/layout/ResponsiveWidth.astro";
import ImagesSwiper from "../components/guide/ThumbsSwiper.tsx";
import GoogleMap from "../components/GoogleMap.astro";
import GearSwiper from "../components/gear/GearSwiper.tsx";
import CommentForm from "../components/form/CommentForm.astro";
import { getSimilarGuides } from "../utils/similarity";
import BaseSwiper from "../components/ui/BaseSwiper";

import TableOfContents from "../components/toc/TableOfContents.tsx";
import HikingGuideSEO from "../seo/HikingGuideSEO.astro";

type Props = CollectionEntry<"guides">["data"];

const {
  title,
  youtube,
  introduction,
  description,
  conclusion,
  image,
  modified_date,
  tags,
  links,
  sections,
} = Astro.props;

const guides = await getCollection("guides");
const guidesWithSimilarity = getSimilarGuides(guides, tags);

// Generate table of contents from sections
const tableOfContents = sections
  .filter((s) => s.toc !== false)
  .map((section) => ({
    title: section.id
      .split("-")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(" "),
    id: section.id,
  }));
---

<Layout
  title={title}
  description={description}
  image={image}
  navStyle="transparent"
>
  <Banner title={title} type="image" media={image} />
  <div class="my-8">
    <Intro
      title={title}
      lastUpdated={modified_date}
      description={introduction}
      videoId={youtube ?? ""}
    />
  </div>

  <!-- Links -->
  {
    links && (
      <ResponsiveWidth size="md">
        <div class="flex flex-col sm:flex-row items-center justify-center gap-2 mb-8">
          <Text variant="h6">Quick Links:</Text>
          {links.map((l) => {
            return (
              <h1>
                <LinkButton href={l.url} variant="secondary" size="sm">
                  {l.title}
                </LinkButton>
              </h1>
            );
          })}
        </div>
      </ResponsiveWidth>
    )
  }

  <!-- Table of Contents -->
  <TableOfContents client:load items={tableOfContents} />

  <!-- Sections -->
  <div class="space-y-4 md:space-y-8 my-8 md:my-16">
    {
      sections.map((section) => (
        <div
          class={`${section.background === "dark" ? "bg-background-alt py-8" : ""} space-y-4 md:space-y-8`}
        >
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal" id={section.id}>
              {section.title}
            </Text>
            {section.introduction && (
              <Text variant="body">{section.introduction}</Text>
            )}
          </ResponsiveWidth>

          {section.content && (
            <ResponsiveWidth
              size={section.content.type === "list" ? "md" : "lg"}
            >
              {/* Handle different content types */}
              {section.content.type === "images" && (
                <ImagesSwiper
                  client:visible
                  imagePaths={section.content.paths}
                />
              )}

              {section.content.type === "google-map" && (
                <GoogleMap mapId={section.content.mapId} />
              )}

              {section.content.type === "itinerary" && (
                <ItineraryTable
                  client:visible
                  itinerary={section.content.phases}
                />
              )}

              {section.content.type === "gear" && (
                <GearSwiper client:visible trip={section.content.trip} />
              )}

              {section.content.type === "list" &&
                section.content.items.map((item) => (
                  <Text variant="body">
                    <b>{item.title}: </b>
                    {item.description}
                  </Text>
                ))}

              {section.content.type === "partnership" && (
                <div class="flex justify-center">
                  <a href={section.content.link} target="_blank">
                    <img
                      src={section.content.logo}
                      class="max-w-sm w-full h-full"
                    />
                  </a>
                </div>
              )}
            </ResponsiveWidth>
          )}

          {section.subsections &&
            section.subsections.length > 0 &&
            section.subsections.map((subsection) => (
              <>
                <ResponsiveWidth size="md">
                  <Text variant="h3" spacing="normal">
                    {subsection.title}
                  </Text>
                </ResponsiveWidth>
                {subsection.images && (
                  <ResponsiveWidth size="lg">
                    <ImagesSwiper
                      client:visible
                      imagePaths={subsection.images}
                    />
                  </ResponsiveWidth>
                )}
                <ResponsiveWidth size="md">
                  <Text variant="body">{subsection.description}</Text>
                </ResponsiveWidth>
              </>
            ))}

          {section.conclusion && (
            <ResponsiveWidth size="md">
              <Text variant="body">{section.conclusion}</Text>
            </ResponsiveWidth>
          )}
        </div>
      ))
    }

    <!-- Conclusion -->
    {
      conclusion && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal">
              Conclusion
            </Text>
            <Text variant="body">{conclusion}</Text>
          </ResponsiveWidth>
        </>
      )
    }

    <!-- Similar Guides -->
    <div>
      <ResponsiveWidth size="md">
        <Text variant="h3" spacing="normal">You Might Also Like</Text>
      </ResponsiveWidth>
      <ResponsiveWidth size="lg">
        <BaseSwiper
          client:visible
          items={guidesWithSimilarity}
          urlPrefix="guides"
        />
      </ResponsiveWidth>
    </div>

    <!-- Comment -->
    <ResponsiveWidth size="md">
      <Text variant="body"
        >My site does not support public comments. Please use the form below to
        send a comment directly to me if you want to ask questions; I am happy
        to help.</Text
      >
    </ResponsiveWidth>
    <ResponsiveWidth size="lg">
      <CommentForm />
    </ResponsiveWidth>

    <!-- Disclosure -->
    <ResponsiveWidth size="md">
      <div class="space-y-4">
        <Text variant="custom" className="text-sm italic">
          <span class="underline font-bold"> Safety Disclosure: </span>
          <span>
            This travel guide is intended for educational purposes only. Readers
            are urged to conduct their due diligence, verify current conditions,
            and research the most recent information independently. Conditions
            along trails and relevant details may change, necessitating the
            confirmation of accurate and updated information from reliable
            sources or local authorities before undertaking any travel or
            outdoor activities.
          </span>
        </Text>
        <Text variant="custom" className="text-sm italic">
          <span class="underline font-bold"> Affiliate Disclosure: </span>
          <span>
            This travel guide contains affiliate links, which means I may earn a
            commission for purchases made through these links at no cost to you.
            Your support helps sustain the creation of more content.
          </span>
        </Text>
      </div>
    </ResponsiveWidth>
  </div>
  <HikingGuideSEO guide={Astro.props} />
</Layout>
