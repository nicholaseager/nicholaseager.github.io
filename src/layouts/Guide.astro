---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "./Layout.astro";
import Banner from "../components/Banner.astro";
import Text from "../components/ui/Text.tsx";
import LinkButton from "../components/ui/LinkButton.tsx";
import Intro from "../components/guide/Intro.astro";
import Itinerary from "../components/guide/Itinerary.tsx";
import ResponsiveWidth from "../components/layout/ResponsiveWidth.astro";
import ImagesSwiper from "../components/guide/ThumbsSwiper.tsx";
import GoogleMap from "../components/GoogleMap.astro";
import GearSwiper from "../components/gear/GearSwiper.tsx";
import CommentForm from "../components/form/CommentForm.astro";
import { getSimilarGuides } from "../utils/similarity";
import BaseSwiper from "../components/ui/BaseSwiper";

import TableOfContents from "../components/toc/TableOfContents.tsx";
import HikingGuideSEO from "../seo/HikingGuideSEO.astro";

type Props = CollectionEntry<"guides">["data"];

const {
  title,
  youtube,
  introduction,
  conclusion,
  image,
  modified_date,
  overview,
  weather,
  basics,
  map,
  itinerary,
  highlights,
  gear,
  tags,
  partnership,
} = Astro.props;

const guides = await getCollection("guides");
const guidesWithSimilarity = getSimilarGuides(guides, tags);

interface TableOfContentsItem {
  title: string;
  id: string;
}

// Generate table of contents based on available sections
const tableOfContents: TableOfContentsItem[] = [
  { title: "Overview", id: "overview", enabled: !!overview },
  { title: "Basic Information", id: "basics", enabled: !!basics },
  { title: "Weather", id: "weather", enabled: !!weather },
  { title: "Map", id: "map", enabled: !!map },
  { title: "Itinerary", id: "itinerary", enabled: !!itinerary },
  { title: "Highlights", id: "highlights", enabled: !!highlights },
  { title: "Gear", id: "gear", enabled: !!gear },
].filter((item) => item.enabled);
---

<Layout navStyle="transparent">
  <HikingGuideSEO
    slot="seo"
    guide={Astro.props}
  />
  <Banner title={title} type="image" media={image} />
  <div class="my-8">
    <Intro
      title={title}
      lastUpdated={modified_date}
      description={introduction}
      videoId={youtube ?? ""}
    />
  </div>

  <!-- Table of Contents -->
  <TableOfContents client:load items={tableOfContents} />

  <div class="space-y-4 md:space-y-8 my-8 md:my-16">
    <!-- Overview -->
    {
      overview && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal" id="overview">Overview</Text>
          </ResponsiveWidth>
          <ResponsiveWidth size="lg">
            <ImagesSwiper client:visible imagePaths={overview.images ?? []} />
          </ResponsiveWidth>
          <ResponsiveWidth size="md">
            <Text variant="body">{overview.summary}</Text>
          </ResponsiveWidth>
        </>
      )
    }

    <!-- Partnership -->
    {
      partnership && (
        <div class="bg-background-alt p-8">
          <ResponsiveWidth size="lg">
          <Text variant="h2" spacing="normal">{partnership.title}</Text>
          <Text variant="body" spacing="normal" id="overview">{partnership.description}</Text>
          <div class="flex justify-center">
            <a href={partnership.link} target="_blank">
              <img src={partnership.logo} class="max-w-sm w-full h-full" />
            </a>
          </div>
          </ResponsiveWidth>
        </div>
      )
    }

    <!-- Basics -->
    {
      basics && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal" id="basics">Basic Information</Text>
          </ResponsiveWidth>
          {basics.items.map((item) => (
            <ResponsiveWidth size="md">
              <Text variant="body">
                <b>{item.title}: </b>
                {item.description}
              </Text>
            </ResponsiveWidth>
          ))}
        </>
      )
    }

    <!-- Weather -->
    {
      weather && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal" id="weather">Weather</Text>
            {weather.introduction && <Text variant="body">{weather.introduction}</Text>}
          </ResponsiveWidth>
          {weather.seasons?.map((item) => (
            <ResponsiveWidth size="md">
              <Text variant="body">
                <b>{item.title}: </b>
                {item.description}
              </Text>
            </ResponsiveWidth>
          ))}
        </>
      )
    }

    <!-- Map -->
    {
      map && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal" id="map">Map</Text>
            {map.introduction && <Text variant="body">{map.introduction}</Text>}
          </ResponsiveWidth>
          <ResponsiveWidth size="lg">
            <GoogleMap mapId={map.id} />
          </ResponsiveWidth>
        </>
      )
    }

    <!-- Itinerary -->
    {
      itinerary && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal" id="itinerary">Itinerary</Text>
            {itinerary.introduction && <Text variant="body">{itinerary.introduction}</Text>}
          </ResponsiveWidth>
          <ResponsiveWidth size="lg">
            <Itinerary client:visible itinerary={itinerary.phases} />
          </ResponsiveWidth>
        </>
      )
    }

    <!-- Highlights -->
    {
      highlights && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal" id="highlights">Highlights</Text>
            {highlights.introduction && <Text variant="body">{highlights.introduction}</Text>}
          </ResponsiveWidth>
          {highlights.items.map((item) => (
            <ResponsiveWidth size="md">
              <Text variant="h3" spacing="normal">{item.title}</Text>
            </ResponsiveWidth>
            <ResponsiveWidth size="lg">
              {item.images && (
                <ImagesSwiper client:visible imagePaths={item.images} />
              )}
            </ResponsiveWidth>
            <ResponsiveWidth size="md">
              <Text variant="body">{item.description}</Text>
            </ResponsiveWidth>
          ))}
        </>
      )
    }

    <!-- Gear -->
    {
      gear && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal" id="gear">Gear</Text>
            {gear.introduction && <Text variant="body">{gear.introduction}</Text>}
          </ResponsiveWidth>
          <ResponsiveWidth size="lg">
            <GearSwiper client:visible trip={gear.trip} />
          </ResponsiveWidth>
          <ResponsiveWidth size="md">
            <Text variant="body">The provided gear list is a suggestion, tailor it to your needs. Prioritize safety by packing and preparing well for a happy, adventurous hike. Interested in all of my gear recommendations? Click the button below to see what I recommend for filming, travel, and fun :)</Text>
            <div class="mt-4"><LinkButton href="/gear">Explore All Gear</LinkButton></div>
          </ResponsiveWidth>
        </>
      )
    }

    <!-- Conclusion -->
    {
      conclusion && (
        <>
          <ResponsiveWidth size="md">
            <Text variant="h2" spacing="normal">Conclusion</Text>
            <Text variant="body">{conclusion}</Text>
          </ResponsiveWidth>
        </>
      )
    }

    <!-- Similar Guides -->
    <div>
      <ResponsiveWidth size="md">
        <Text variant="h3" spacing="normal">You Might Also Like</Text>
      </ResponsiveWidth>
      <ResponsiveWidth size="lg">
        <BaseSwiper client:visible items={guidesWithSimilarity} urlPrefix="guides" />
      </ResponsiveWidth>
    </div>

    <!-- Comment -->
    <ResponsiveWidth size="md">
      <Text variant="body">My site does not support public comments. Please use the form below to send a comment directly to me if you want to ask questions; I am happy to help.</Text>
    </ResponsiveWidth>
    <ResponsiveWidth size="lg">
      <CommentForm/>
    </ResponsiveWidth>

    <!-- Disclosure -->
    <ResponsiveWidth size="md">
      <div class="space-y-4">
        <Text variant="custom" className="text-sm italic">
          <span class="underline font-bold">
            Safety Disclosure:
          </span>
          <span>
            This travel guide is intended for educational purposes only. Readers are urged to conduct their due diligence,
            verify current conditions, and research the most recent information independently. Conditions along trails and relevant
            details may change, necessitating the confirmation of accurate and updated information from reliable sources or local
            authorities before undertaking any travel or outdoor activities.
          </span>
        </Text>
        <Text variant="custom" className="text-sm italic">
          <span class="underline font-bold">
            Affiliate Disclosure: 
          </span>
          <span>  
            This travel guide contains affiliate links, which means I may earn a commission for purchases made through these
            links at no cost to you. Your support helps sustain the creation of more content.
          </span>
        </Text>
      </div>
    </ResponsiveWidth>
  </div>
</Layout>
