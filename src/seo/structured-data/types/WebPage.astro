---
interface Props {
  title: string;
  description: string;
  imageURL: URL;
  url: URL;
  siteName: string;
}

const { title, description, imageURL, url, siteName } = Astro.props;
const basePath = url.origin;
const relativePath = url.pathname;

// Generate breadcrumbs based on currentPath
const generateBreadcrumbs = (path: string) => {
  // TODO: Photos urls do not include a page at every part
  const parts = path.split("/").filter(Boolean);
  return [
    {
      "@type": "ListItem",
      position: 1,
      name: "Home",
      item: basePath,
    },
    ...parts.map((part, index) => ({
      "@type": "ListItem",
      position: index + 2,
      name: part.charAt(0).toUpperCase() + part.slice(1),
      item: new URL(parts.slice(0, index + 1).join("/"), basePath).toString(),
    })),
  ];
};

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  name: title,
  description: description,
  url: url.toString(),
  isPartOf: {
    "@type": "WebSite",
    name: siteName,
    url: basePath,
  },
  breadcrumb: {
    "@type": "BreadcrumbList",
    itemListElement: generateBreadcrumbs(relativePath),
  },
  mainContentOfPage: {
    "@type": "WebPageElement",
    isPartOf: {
      "@id": basePath,
    },
  },
  primaryImageOfPage: {
    "@type": "ImageObject",
    url: imageURL.toString(),
  },
};
---

<script
  is:inline
  type="application/ld+json"
  set:html={JSON.stringify(jsonLd)}
/>
